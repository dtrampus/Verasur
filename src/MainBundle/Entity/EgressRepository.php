<?php

namespace MainBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EgressRepository extends EntityRepository {

    public function ajaxTable(array $get, $flag = false) {
        /* Indexed column (used for fast and accurate table cardinality) */
        $alias = 'e';
        /* DB table to use */
        $tableObjectName = 'MainBundle:Egress';
        /**
         * Set to default
         */
        if (!isset($get['columns']) || empty($get['columns']))
            $get['columns'] = array('id');
        $aColumns = array();
        foreach ($get['columns'] as $value)
            $aColumns[] = $value;
        $cb = $this->getEntityManager()
                ->createQueryBuilder($alias)
                ->select('e.baln', 'e.date', 'client.nombre', 'e.truckDomain', 'e.coupledDomain', 'transport.transport', 'e.driver', 'e.grossWeight', 'e.tareWeight', 'product.description', 'e.density', 'e.clean', 'e.realLiter', 'e.branchNumber', 'e.remitNumber')
                ->from('MainBundle\Entity\Egress', 'e')
                ->innerJoin('e.client', 'client')
                ->innerJoin('e.product', 'product')
                ->innerJoin('e.transport', 'transport');
        if (isset($get['iDisplayStart']) && $get['iDisplayLength'] != '-1') {
            $cb->setFirstResult((int) $get['iDisplayStart'])
                    ->setMaxResults((int) $get['iDisplayLength']);
        }
        /*
         * Ordering
         */
        if (isset($get['iSortCol_0'])) {
            for ($i = 0; $i < intval($get['iSortingCols']); $i++) {
                if ($get['bSortable_' . intval($get['iSortCol_' . $i])] == "true") {
                    $cb->orderBy($aColumns[(int) $get['iSortCol_' . $i]], $get['sSortDir_' . $i]);
                }
            }
        }
        /*
         * Filtering
         * NOTE this does not match the built-in DataTables filtering which does it
         * word by word on any field. It's possible to do here, but concerned about efficiency
         * on very large tables, and MySQL's regex functionality is very limited
         */
        if (isset($get['search']) && $get['search'] != '') {
            $aLike = array();
            for ($i = 0; $i < count($aColumns); $i++) {
                if (isset($aColumns[$i.'searchable']) && $aColumns[$i.'searchable'] == "true") {
                    $aLike[] = $cb->expr()->like($aColumns[$i], '\'%' . $get['search'] . '%\'');
                }
            }
            if (count($aLike) > 0)
                $cb->andWhere(new Expr\Orx($aLike));
            else
                unset($aLike);
        }
        /*
         * SQL queries
         * Get data to display
         */
        $query = $cb->getQuery();
        if ($flag)
            return $query;
        else
            return $query->getResult();
    }

    /**
     * @return int
     */
    public function getCount() {
        $aResultTotal = $this->getEntityManager()
                ->createQuery('SELECT COUNT(a) FROM MainBundle:Egress a')
                ->setMaxResults(1)
                ->getResult();
        return $aResultTotal[0][1];
    }

}
