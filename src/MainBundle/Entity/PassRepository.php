<?php

namespace MainBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Orx;

/**
 * PassRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PassRepository extends EntityRepository
{
    public function ajaxTable(array $get, $flag = false) {
        /* DB table to use */
        $tableObjectName = 'MainBundle:Pass';
        /**
         * Set to default
         */
        $arrayColumns = array();
        foreach ($get['columns'] as $value) {
            if ($value['name'] != "") {
                $arrayColumns[] = $value['name'];
            }
        }
        $cb = $this->getEntityManager()
                ->createQueryBuilder("p")
                ->select($arrayColumns)
                ->from('MainBundle\Entity\Pass', 'p')
                ->innerJoin('p.product', 'product')
                ->innerJoin('p.movementDetails', 'movD');
        if (isset($get['start']) && $get['length'] != '-1') {
            $cb->setFirstResult((int) $get['start'])
                    ->setMaxResults((int) $get['length']);
        }
        /*
         * Ordering
         */
        if (isset($get['order'])) {
            for ($i = 0; $i < count($get['order']); $i++) {
                $order = $get['order'][$i];
                if ($get['columns'][$order['column']]['orderable'] == "true") {
                    $cb->orderBy($get['columns'][$order['column']]['name'], $order['dir']);
                }
            }
        }
        
        /*
         * Filtering
         * NOTE this does not match the built-in DataTables filtering which does it
         * word by word on any field. It's possible to do here, but concerned about efficiency
         * on very large tables, and MySQL's regex functionality is very limited
         */
        if (isset($get['search']) && $get['search'] != '') {
            $columns = $get['columns'];
            $aLike = array();
            for ($i = 0; $i < count($columns); $i++) {
                if (isset($columns[$i]['searchable']) && $columns[$i]['searchable'] == "true") {
                    $aLike[] = $cb->expr()->like($columns[$i]["name"], '\'%' . $get['search']["value"] . '%\'');
                }
            }
            if (count($aLike) > 0)
                $cb->andWhere(new Orx($aLike));
            else
                unset($aLike);
        }
        /*
         * SQL queries
         * Get data to display
         */
        $query = $cb->getQuery();
        if ($flag)
            return $query;
        else
            return $query->getResult();
    }

    /**
     * @return int
     */
    public function getCount() {
        $aResultTotal = $this->getEntityManager()
                ->createQuery('SELECT COUNT(a) FROM MainBundle:Pass a')
                ->setMaxResults(1)
                ->getResult();
        return $aResultTotal[0][1];
    }

    public function getFilteredCount(array $get) {
        $arrayColumns = array();
        foreach ($get['columns'] as $value) {
            if ($value['name'] != "") {
                $arrayColumns[] = $value['name'];
            }
        }
        
        /* DB table to use */
        $cb = $this->getEntityManager()
                ->createQueryBuilder("p")
                ->select("count(p.id)")
                ->from('MainBundle\Entity\Pass', 'p')
                ->innerJoin('p.product', 'product')
                ->innerJoin('p.movementDetails', 'movD')
                ->innerJoin('movD.tank', 'tank');

        /*
         * Filtering
         * NOTE this does not match the built-in DataTables filtering which does it
         * word by word on any field. It's possible to do here, but concerned about efficiency
         * on very large tables, and MySQL's regex functionality is very limited
         */
        if (isset($get['search']) && $get['search'] != '') {
            $columns = $get['columns'];
            $aLike = array();
            for ($i = 0; $i < count($columns); $i++) {
                if (isset($columns[$i]['searchable']) && $columns[$i]['searchable'] == "true") {
                    $aLike[] = $cb->expr()->like($columns[$i]["name"], '\'%' . $get['search']["value"] . '%\'');
                }
            }
            if (count($aLike) > 0)
                $cb->andWhere(new Orx($aLike));
            else
                unset($aLike);
        }

        /*
         * SQL queries
         * Get data to display
         */
        $query = $cb->getQuery();
        $aResultTotal = $query->getResult();
        return $aResultTotal[0][1];
    }
}