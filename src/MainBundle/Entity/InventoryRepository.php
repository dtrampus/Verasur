<?php

namespace MainBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * InventoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InventoryRepository extends EntityRepository
{
    public function findDataTable($get) {
        $em = $this->getEntityManager();
                
        /* Array of database columns which should be read and sent back to DataTables. Use a space where
         * you want to insert a non-database field (for example a counter or static image)
         */
        $aColumns = array(
          'id' => 'i.id', 
          'date' => "DATE_FORMAT(i.date,'%d/%m/%Y %H:%i')", 
          'operator' => 'u.username',
          'product' => "CONCAT(p.code,' - ',p.description)",
          'vacuum' => "i.vacuum",
          'volume' => "i.liter",
          'difference' => "ROUND(IFNULL((SELECT ROUND(i.liter,2) - ROUND(i2.liter,2)
                           FROM inventories i2
                           WHERE i2.date < i.date AND i2.tank_id = ".$get["tankId"]."
                           ORDER BY i2.date DESC
                           LIMIT 1),i.liter),2)",
          'observation' => "i.observation");

        /* Indexed column (used for fast and accurate table cardinality) */
        $sIndexColumn = "i.id";

        $sFrom = "FROM inventories i
                    INNER JOIN users u ON i.user_id = u.id
                    INNER JOIN products p ON i.product_id = p.id";

        /*
         * Select
         */
        $sSelect = "SELECT ";
        $prefix = "";
        foreach ($get['columns'] as $value) {
            if ($value['name'] != "" && array_key_exists($value['name'], $aColumns)) {
                $sSelect .= $prefix.$aColumns[$value['name']]." AS ".$value['name'];
                $prefix = ", ";
            }
        }
        /*
         * Paging
         */
        $sLimit = "";
        if ( isset($get['start']) && $get['length'] != '-1' )
        {
            $sLimit = "LIMIT ".intval( $get['start'] ).", ".intval( $get['length'] );
        }


        /*
         * Ordering
         */
        $sOrder = "";
        if ( isset( $get['order'] ) )
        {
            $sOrder = "ORDER BY  ";
            for ( $i=0 ; $i<intval( $get['order'] ) ; $i++ )
            {
                $order = $get['order'][$i];
                if ( $get['columns'][$order['column']]['orderable'] == "true" )
                {
                    if ( $get['columns'][$order['column']]['name'] == "date" )
                    {
                        $sOrder .= "i.date"."
                        ".$order['dir'] .", ";
                    }else{
                        $sOrder .= $get['columns'][$order['column']]['name']."
                        ".$order['dir'] .", ";
                    }
                }
            }

            $sOrder = substr_replace( $sOrder, "", -2 );
            if ( $sOrder == "ORDER BY" )
            {
                $sOrder = "";
            }
        }


        /*
         * Filtering
         * NOTE this does not match the built-in DataTables filtering which does it
         * word by word on any field. It's possible to do here, but concerned about efficiency
         * on very large tables, and MySQL's regex functionality is very limited
         */
        $initWhere = "WHERE i.tank_id = ".$get["tankId"];
        $sWhere = $initWhere;
        if ( isset($get['search']) && $get['search'] != "" )
        {
            if ( $sWhere == "" )
            {
                $sWhere = "WHERE (";
            }
            else
            {
                $sWhere .= " AND (";
            }
            $columns = $get['columns'];
            for ( $i=0 ; $i<count($columns) ; $i++ )
            {
                if ( isset($columns[$i]['searchable']) && $columns[$i]['searchable'] == "true" )
                {
                    $sWhere .= $aColumns[$columns[$i]["name"]]." LIKE '%".$get['search']["value"]."%' OR ";
                }
            }
            $sWhere = substr_replace( $sWhere, "", -3 );
            $sWhere .= ')';
        }

        /*
         * SQL queries
         * Get data to display
         */
        $sQuery = "
            $sSelect
            $sFrom
            $sWhere
            $sOrder
            $sLimit
        ";

        $stmt = $em->getConnection()->prepare($sQuery);
        $stmt->execute();
        $rResult = $stmt->fetchAll();

        /* Data set length after filtering */
        $sQuery = "
            SELECT IFNULL(COUNT(".$sIndexColumn."),0) AS count
            $sFrom
            $sWhere
        ";
        
        $stmt = $em->getConnection()->prepare($sQuery);
        $stmt->execute();
        $rResultFilteres = $stmt->fetch();
        $iFilteredTotal = $rResultFilteres["count"];;

        /* Total data set length */
        $sQuery = "
            SELECT IFNULL(COUNT(".$sIndexColumn."),0) AS count
            $sFrom
            $initWhere
        ";

        $stmt = $em->getConnection()->prepare($sQuery);
        $stmt->execute();
        $row = $stmt->fetch(); 
        $iTotal = $row["count"];
        /*
         * Output
         */
        $output = array(
          "draw" => intval($get['draw']),
          "recordsTotal" => $iTotal,
          "recordsFiltered" => $iFilteredTotal,
          "data" => array()
        );

        foreach ($rResult as $aRow) {
            $row = array();
            foreach ($aRow as $value) {
              $row[]=$value;  
            }
            $output['data'][] = $row;
        }

        return $output;
    }
}
